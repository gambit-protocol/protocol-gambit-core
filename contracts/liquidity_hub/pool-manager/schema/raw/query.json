{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Retrieves the contract's config.",
      "type": "string",
      "enum": [
        "config"
      ]
    },
    {
      "description": "Retrieves the decimals for the given asset.",
      "type": "object",
      "required": [
        "asset_decimals"
      ],
      "properties": {
        "asset_decimals": {
          "type": "object",
          "required": [
            "denom",
            "pool_identifier"
          ],
          "properties": {
            "denom": {
              "description": "The queried denom in the given pool_identifier.",
              "type": "string"
            },
            "pool_identifier": {
              "description": "The pool identifier to do the query for.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Simulates a swap.",
      "type": "object",
      "required": [
        "simulation"
      ],
      "properties": {
        "simulation": {
          "type": "object",
          "required": [
            "ask_asset_denom",
            "offer_asset",
            "pool_identifier"
          ],
          "properties": {
            "ask_asset_denom": {
              "description": "The ask asset denom to get.",
              "type": "string"
            },
            "offer_asset": {
              "description": "The offer asset to swap.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "pool_identifier": {
              "description": "The pool identifier to swap in.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Simulates a reverse swap, i.e. given the ask asset, how much of the offer asset is needed to perform the swap.",
      "type": "object",
      "required": [
        "reverse_simulation"
      ],
      "properties": {
        "reverse_simulation": {
          "type": "object",
          "required": [
            "ask_asset",
            "offer_asset_denom",
            "pool_identifier"
          ],
          "properties": {
            "ask_asset": {
              "description": "The ask asset to get after the swap.",
              "allOf": [
                {
                  "$ref": "#/definitions/Coin"
                }
              ]
            },
            "offer_asset_denom": {
              "description": "The offer asset denom to input.",
              "type": "string"
            },
            "pool_identifier": {
              "description": "The pool identifier to swap in.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Gets the swap route for the given offer and ask assets.",
      "type": "object",
      "required": [
        "swap_route"
      ],
      "properties": {
        "swap_route": {
          "type": "object",
          "required": [
            "ask_asset_denom",
            "offer_asset_denom"
          ],
          "properties": {
            "ask_asset_denom": {
              "description": "The ask asset denom, i.e. the asset that is being received.",
              "type": "string"
            },
            "offer_asset_denom": {
              "description": "The offer asset denom, i.e. the asset that is being swapped.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Gets all swap routes registered",
      "type": "string",
      "enum": [
        "swap_routes"
      ]
    },
    {
      "description": "Simulates swap operations.",
      "type": "object",
      "required": [
        "simulate_swap_operations"
      ],
      "properties": {
        "simulate_swap_operations": {
          "type": "object",
          "required": [
            "offer_amount",
            "operations"
          ],
          "properties": {
            "offer_amount": {
              "description": "The amount to swap.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "operations": {
              "description": "The operations to perform.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapOperation"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Simulates a reverse swap operations, i.e. given the ask asset, how much of the offer asset is needed to perform the swap.",
      "type": "object",
      "required": [
        "reverse_simulate_swap_operations"
      ],
      "properties": {
        "reverse_simulate_swap_operations": {
          "type": "object",
          "required": [
            "ask_amount",
            "operations"
          ],
          "properties": {
            "ask_amount": {
              "description": "The amount to get after the swap.",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "operations": {
              "description": "The operations to perform.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapOperation"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Retrieves the pools information.",
      "type": "object",
      "required": [
        "pools"
      ],
      "properties": {
        "pools": {
          "type": "object",
          "properties": {
            "limit": {
              "description": "An optional parameter specifying the maximum number of pools to return.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "pool_identifier": {
              "description": "If provided, the query will return the pool with the given identifier, otherwise, it will return all pools.",
              "type": [
                "string",
                "null"
              ]
            },
            "start_after": {
              "description": "An optional parameter specifying what pool identifier to start searching after.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Retrieves the creator of the swap route to get from offer to ask asset. The creator of the swap route can remove it.",
      "type": "object",
      "required": [
        "swap_route_creator"
      ],
      "properties": {
        "swap_route_creator": {
          "type": "object",
          "required": [
            "ask_asset_denom",
            "offer_asset_denom"
          ],
          "properties": {
            "ask_asset_denom": {
              "description": "The ask asset denom, i.e. the asset that is being received.",
              "type": "string"
            },
            "offer_asset_denom": {
              "description": "The offer asset denom, i.e. the asset that is being swapped.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the contract's ownership information",
      "type": "object",
      "required": [
        "ownership"
      ],
      "properties": {
        "ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "SwapOperation": {
      "description": "The type of swap operation to perform.",
      "oneOf": [
        {
          "description": "A swap operation that uses the WhaleSwap router.",
          "type": "object",
          "required": [
            "whale_swap"
          ],
          "properties": {
            "whale_swap": {
              "type": "object",
              "required": [
                "pool_identifier",
                "token_in_denom",
                "token_out_denom"
              ],
              "properties": {
                "pool_identifier": {
                  "description": "The identifier of the pool to use for the swap.",
                  "type": "string"
                },
                "token_in_denom": {
                  "description": "The token denom to swap in.",
                  "type": "string"
                },
                "token_out_denom": {
                  "description": "The token denom returning from the swap.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}

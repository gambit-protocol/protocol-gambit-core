{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Creates a new pool.",
      "type": "object",
      "required": [
        "create_pool"
      ],
      "properties": {
        "create_pool": {
          "type": "object",
          "required": [
            "asset_decimals",
            "asset_denoms",
            "pool_fees",
            "pool_type"
          ],
          "properties": {
            "asset_decimals": {
              "description": "The decimals for the given asset denoms, provided in the same order as `asset_denoms`.",
              "type": "array",
              "items": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "asset_denoms": {
              "description": "The asset denoms for the pool.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "pool_fees": {
              "description": "The fees for the pool.",
              "allOf": [
                {
                  "$ref": "#/definitions/PoolFee"
                }
              ]
            },
            "pool_identifier": {
              "description": "The identifier for the pool.",
              "type": [
                "string",
                "null"
              ]
            },
            "pool_type": {
              "description": "The type of pool to create.",
              "allOf": [
                {
                  "$ref": "#/definitions/PoolType"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Provides liquidity to the pool",
      "type": "object",
      "required": [
        "provide_liquidity"
      ],
      "properties": {
        "provide_liquidity": {
          "type": "object",
          "required": [
            "pool_identifier"
          ],
          "properties": {
            "lock_position_identifier": {
              "description": "The identifier of the position to lock the LP tokens in the incentive manager, if any.",
              "type": [
                "string",
                "null"
              ]
            },
            "max_spread": {
              "description": "The maximum allowable spread between the bid and ask prices for the pool. When provided, if the spread exceeds this value, the liquidity provision will not be executed.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pool_identifier": {
              "description": "The identifier for the pool to provide liquidity for.",
              "type": "string"
            },
            "receiver": {
              "description": "The receiver of the LP",
              "type": [
                "string",
                "null"
              ]
            },
            "slippage_tolerance": {
              "description": "A percentage value representing the acceptable slippage for the operation. When provided, if the slippage exceeds this value, the liquidity provision will not be executed.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "unlocking_duration": {
              "description": "The amount of time in seconds to unlock tokens if taking part on the incentives. If not passed, the tokens will not be locked and the LP tokens will be returned to the user.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Swap an offer asset to the other",
      "type": "object",
      "required": [
        "swap"
      ],
      "properties": {
        "swap": {
          "type": "object",
          "required": [
            "ask_asset_denom",
            "pool_identifier"
          ],
          "properties": {
            "ask_asset_denom": {
              "description": "The return asset of the swap.",
              "type": "string"
            },
            "belief_price": {
              "description": "The belief price of the swap.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "max_spread": {
              "description": "The maximum spread to incur when performing the swap. If the spread exceeds this value, the swap will not be executed.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pool_identifier": {
              "description": "The identifier for the pool to swap in.",
              "type": "string"
            },
            "receiver": {
              "description": "The recipient of the output tokens. If not provided, the tokens will be sent to the sender of the message.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Withdraws liquidity from the pool.",
      "type": "object",
      "required": [
        "withdraw_liquidity"
      ],
      "properties": {
        "withdraw_liquidity": {
          "type": "object",
          "required": [
            "pool_identifier"
          ],
          "properties": {
            "pool_identifier": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Execute multiple [`SwapOperations`] to allow for multi-hop swaps.",
      "type": "object",
      "required": [
        "execute_swap_operations"
      ],
      "properties": {
        "execute_swap_operations": {
          "type": "object",
          "required": [
            "operations"
          ],
          "properties": {
            "max_spread": {
              "description": "The (optional) maximum spread to incur when performing any swap.\n\nIf left unspecified, there is no limit to what spread the transaction can incur.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Decimal"
                },
                {
                  "type": "null"
                }
              ]
            },
            "minimum_receive": {
              "description": "The minimum amount of the output (i.e., final swap operation token) required for the message to succeed.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "operations": {
              "description": "The operations that should be performed in sequence.\n\nThe amount in each swap will be the output from the previous swap.\n\nThe first swap will use whatever funds are sent in the [`MessageInfo`].",
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapOperation"
              }
            },
            "receiver": {
              "description": "The (optional) recipient of the output tokens.\n\nIf left unspecified, tokens will be sent to the sender of the message.",
              "type": [
                "string",
                "null"
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Adds swap routes to the router.",
      "type": "object",
      "required": [
        "add_swap_routes"
      ],
      "properties": {
        "add_swap_routes": {
          "type": "object",
          "required": [
            "swap_routes"
          ],
          "properties": {
            "swap_routes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapRoute"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Removes swap routes from the router.",
      "type": "object",
      "required": [
        "remove_swap_routes"
      ],
      "properties": {
        "remove_swap_routes": {
          "type": "object",
          "required": [
            "swap_routes"
          ],
          "properties": {
            "swap_routes": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SwapRoute"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Updates the configuration of the contract. If a field is not specified (i.e., set to `None`), it will not be modified.",
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "bonding_manager_addr": {
              "description": "The new bonding-manager contract address.",
              "type": [
                "string",
                "null"
              ]
            },
            "feature_toggle": {
              "description": "The new feature toggles of the contract, allowing fine-tuned control over which operations are allowed.",
              "anyOf": [
                {
                  "$ref": "#/definitions/FeatureToggle"
                },
                {
                  "type": "null"
                }
              ]
            },
            "pool_creation_fee": {
              "description": "The new fee that must be paid when a pool is created.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Coin"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update the contract's ownership. The `action` to be provided can be either to propose transferring ownership to an account, accept a pending ownership transfer, or renounce the ownership permanently.",
      "type": "object",
      "required": [
        "update_ownership"
      ],
      "properties": {
        "update_ownership": {
          "$ref": "#/definitions/Action"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Action": {
      "description": "Actions that can be taken to alter the contract's ownership",
      "oneOf": [
        {
          "description": "Propose to transfer the contract's ownership to another account, optionally with an expiry time.\n\nCan only be called by the contract's current owner.\n\nAny existing pending ownership transfer is overwritten.",
          "type": "object",
          "required": [
            "transfer_ownership"
          ],
          "properties": {
            "transfer_ownership": {
              "type": "object",
              "required": [
                "new_owner"
              ],
              "properties": {
                "expiry": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Expiration"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "new_owner": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Accept the pending ownership transfer.\n\nCan only be called by the pending owner.",
          "type": "string",
          "enum": [
            "accept_ownership"
          ]
        },
        {
          "description": "Give up the contract's ownership and the possibility of appointing a new owner.\n\nCan only be invoked by the contract's current owner.\n\nAny existing pending ownership transfer is canceled.",
          "type": "string",
          "enum": [
            "renounce_ownership"
          ]
        }
      ]
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Expiration": {
      "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
      "oneOf": [
        {
          "description": "AtHeight will expire when `env.block.height` >= height",
          "type": "object",
          "required": [
            "at_height"
          ],
          "properties": {
            "at_height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        {
          "description": "AtTime will expire when `env.block.time` >= time",
          "type": "object",
          "required": [
            "at_time"
          ],
          "properties": {
            "at_time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Never will never expire. Used to express the empty variant",
          "type": "object",
          "required": [
            "never"
          ],
          "properties": {
            "never": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "FeatureToggle": {
      "description": "Pool feature toggle, can control whether swaps, deposits, and withdrawals are enabled.",
      "type": "object",
      "required": [
        "deposits_enabled",
        "swaps_enabled",
        "withdrawals_enabled"
      ],
      "properties": {
        "deposits_enabled": {
          "description": "Whether or not deposits are enabled",
          "type": "boolean"
        },
        "swaps_enabled": {
          "description": "Whether or not swaps are enabled",
          "type": "boolean"
        },
        "withdrawals_enabled": {
          "description": "Whether or not swaps are enabled",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "Fee": {
      "type": "object",
      "required": [
        "share"
      ],
      "properties": {
        "share": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false
    },
    "PoolFee": {
      "description": "Represents the fee structure for transactions within a pool.\n\n# Fields - `protocol_fee`: The fee percentage charged by the protocol on each transaction to support operational and developmental needs. - `swap_fee`: The fee percentage allocated to liquidity providers as a reward for supplying liquidity to the pool, incentivizing participation and ensuring pool health. - `burn_fee`: A fee percentage that is burned on each transaction, helping manage the token economy by reducing supply over time, potentially increasing token value. - `osmosis_fee` (optional): Specific to the Osmosis feature, this fee is charged on each transaction when the Osmosis feature is enabled, supporting specific ecosystem requirements. - `extra_fees`: A vector of custom fees allowing for extensible and adaptable fee structures to meet diverse and evolving needs. Validation ensures that the total of all fees does not exceed 100%, maintaining fairness and avoiding overcharging.\n\n# Features - `osmosis`: Enables the `osmosis_fee` field, integrating specific fee requirements for the Osmosis protocol within the pool's fee structure.",
      "type": "object",
      "required": [
        "burn_fee",
        "extra_fees",
        "protocol_fee",
        "swap_fee"
      ],
      "properties": {
        "burn_fee": {
          "description": "Fee percentage that is burned on each transaction. Burning a portion of the transaction fee helps in reducing the overall token supply.",
          "allOf": [
            {
              "$ref": "#/definitions/Fee"
            }
          ]
        },
        "extra_fees": {
          "description": "A list of custom, additional fees that can be defined for specific use cases or additional functionalities. This vector enables the flexibility to introduce new fees without altering the core fee structure. Total of all fees, including custom ones, is validated to not exceed 100%, ensuring a balanced and fair fee distribution.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Fee"
          }
        },
        "protocol_fee": {
          "description": "Fee percentage charged on each transaction for the protocol's benefit.",
          "allOf": [
            {
              "$ref": "#/definitions/Fee"
            }
          ]
        },
        "swap_fee": {
          "description": "Fee percentage allocated to liquidity providers on each swap.",
          "allOf": [
            {
              "$ref": "#/definitions/Fee"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "PoolType": {
      "description": "Possible pool types, it can be either a constant product (xyk) pool or a stable swap pool.",
      "oneOf": [
        {
          "description": "A stable swap pool.",
          "type": "object",
          "required": [
            "stable_swap"
          ],
          "properties": {
            "stable_swap": {
              "type": "object",
              "required": [
                "amp"
              ],
              "properties": {
                "amp": {
                  "description": "The amount of amplification to perform on the constant product part of the swap formula.",
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "xyk pool",
          "type": "string",
          "enum": [
            "constant_product"
          ]
        }
      ]
    },
    "SwapOperation": {
      "description": "The type of swap operation to perform.",
      "oneOf": [
        {
          "description": "A swap operation that uses the WhaleSwap router.",
          "type": "object",
          "required": [
            "whale_swap"
          ],
          "properties": {
            "whale_swap": {
              "type": "object",
              "required": [
                "pool_identifier",
                "token_in_denom",
                "token_out_denom"
              ],
              "properties": {
                "pool_identifier": {
                  "description": "The identifier of the pool to use for the swap.",
                  "type": "string"
                },
                "token_in_denom": {
                  "description": "The token denom to swap in.",
                  "type": "string"
                },
                "token_out_denom": {
                  "description": "The token denom returning from the swap.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SwapRoute": {
      "description": "The swap route structure",
      "type": "object",
      "required": [
        "ask_asset_denom",
        "offer_asset_denom",
        "swap_operations"
      ],
      "properties": {
        "ask_asset_denom": {
          "description": "The ask asset denom, i.e. the asset that is being received.",
          "type": "string"
        },
        "offer_asset_denom": {
          "description": "The offer asset denom, i.e. the asset that is being swapped.",
          "type": "string"
        },
        "swap_operations": {
          "description": "The swap operations to perform to get from offer asset to ask asset.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SwapOperation"
          }
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
